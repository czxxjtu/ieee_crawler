# Author: Xu Wang
# Email: i@xuwang.im
#
# Filename: papers.py
#
#
from document import html_to_document,\
    journal_articles_requests_urls,\
    journal_article_total_number_from_url
from database import *

class Publication:
    """
    Represent papers in a publication
    """
    def __init__(self, title):
        """

        :param title:
        :param last_rank: rank of last checked paper
        :return:
        """
        self.title = title
        self.issn = ''
        self.__id = None

    def get_last_rank(self, papers_table):
        """
        Retrieve the max rank
        :param papers_table: Publications table
        """
        return papers_table.get_max_rank_by_title(self.title)

    def get_total_number_of_articles(self):
        """

        """
        url = journal_articles_requests_urls(self.title)[0]
        return journal_article_total_number_from_url(url)


class Paper:
    """
    A paper
    """
    def __init__(self, publication, doc=None):
        """

        :return:
        """
        self.publication = publication
        self.number = None  # Prime key
        self.doi = None
        self.spage = None
        self.epage = None
        self.issue = None
        self.partnum = None
        self.publicationid = None
        self.year = None
        self.rank = None
        self.title = None
        self.affiliation = None
        self.authors = None
        self.terms = None
        self.volume = None
        self.abstract = None
        if doc is not None:
            self.from_dict(doc)

    def from_dict(self, doc):
        """

        :param doc: a dict generated by html_to_document
        :return:
        """
        self.rank = doc['rank']
        self.title = doc['title']
        if 'authors' in doc:
            self.authors = doc['authors']
        else:
            self.authors = []
        if 'affiliations' in doc:
            self.affiliation = doc['affiliations']
        if 'terms' in doc:
            self.terms = doc['terms']
        else:
            self.terms = []
        if 'volume' in doc:
            self.volume = doc['volume']
        if 'py' in doc:
            self.year = doc['py']
        if 'spage' in doc:
            self.spage = doc['spage']
        if 'epage' in doc:
            self.epage = doc['epage']
        if 'abstract' in doc:
            self.abstract = doc['abstract']
        self.number = doc['arnumber']
        if 'doi' in doc:
            self.doi = doc['doi']
        if 'issue' in doc:
            self.issue = doc['issue']
        if 'partnum' in doc:
            self.partnum = doc['partnum']
        if 'publicationid' in doc:
            self.publicationid = doc['publicationid']
        self.rank = doc['rank']
        self.title = doc['title']
        if 'terms' in doc:
            self.terms = doc['terms']

    def __from_html(self, bs4html):
        doc = html_to_document(bs4html)
        self.rank = doc['rank']
        self.title = doc['title']
        if 'authors' in doc:
            self.authors = doc['authors']
        if 'affiliations' in doc:
            self.affiliation = doc['affiliations']
        if 'terms' in doc:
            self.terms = doc['terms']
        if 'volume' in doc:
            self.volume = doc['volume']
        if 'py' in doc:
            self.year = doc['py']
        if 'spage' in doc:
            self.spage = doc['spage']
        if 'epage' in doc:
            self.epage = doc['epage']
        if 'abstract' in doc:
            self.abstract = doc['abstract']
        self.number = doc['arnumber']
        if 'doi' in doc:
            self.doi = doc['doi']
        if 'issue' in doc:
            self.issue = doc['issue']
        if 'partnum' in doc:
            self.partnum = doc['partnum']
        if 'publicationid' in doc:
            self.publicationid = doc['publicationid']
        self.rank = doc['rank']
        self.title = doc['title']
        if 'terms' in doc:
            self.terms = doc['terms']

    def __str__(self):
        """

        :return:
        """
        pass
